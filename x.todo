Week 1:
	✔ Summon the old memory back @done(22-07-31 10:34)
		✔ Start it locally @done(22-07-31 10:34)
		lore: run extension test with a debug tool
	✔ Find an alternative for or fix callHierarchy @done(22-07-31 13:21)
		✔ Raise in on vscode slack @done(22-07-31 11:05)
		app: progress further with DocumentSymbolProvider
	✔ Nest JSX into current DocumentSymbolProvider @done(22-07-31 13:21)
	☐ Solve Thenable does not resolve problem
		thought: this maybe unfixable
	✔ Solve the Parsed not add to Symbol list problem @done(22-07-31 18:32)
		✔ Open a bunch of issue and tag every one @done(22-07-31 18:29)
		✔ Clone code of Todo+ to see an example @done(22-07-31 18:29)
		lore: turn out I can not add an Object interface Document Symbol 
			and hope for vsc to understandz. I have to instanitate a DocumentSymbol -
			something from OOP that I for long have neglected
		✔ Choose the suitable SymbolKind @done(22-07-31 18:32)
		app: the winner is Field -> some content for build in public
	✔ Make it work for multiple JSX in one file @done(22-08-03 22:14)
	✘ Update with latest set up of babel to help wider use case (for free) @cancelled(22-08-06 11:06)
		lore: it is not equivalent to plugins preset in babelrc. 3 options are : jsx, typescript and flow
		☐ @later config 2 providers - one for js (flow-supported) and one for ts, currently using one and not flow-supported
	✔ Make it work with Typescript (file using generic type) @done(22-08-06 11:07)
		thought: this is for free :D
	✔ Try to make cursor point to JSX breadcrumb if it meant to be @done(22-08-06 14:50)
		✔ Choose breadcrumb based on current cursor position @done(22-08-06 14:50)	
		✔ thought: it currently work with outermost breadcrumb @done(22-08-06 14:50)
		✔ Try with mock with correct range open/close to see if it serve the assumption @done(22-08-06 14:16)
		lore: my assumption was right!
		✔ Update range of component start with open tag and end with close tag @done(22-08-06 14:50)

	☐ Add more detail to the outermost JSX (its nearest parent function)
	thought: I should wait and see if user want it, me too I want to experience it a few day before giving more feature
	✘ Combine two provider result into one @cancelled(22-08-06 14:50)
	thought: this is undoable 
	☐ @later write test
	☐ @later update feature for { } expression inside ReactTree
	thought: considering it...
	✔ Publish it VS Code extension @done(22-08-07 15:36)
	✔ Write some README @done(22-08-06 15:29)
		☐ Clarify paint points
	
	✔ Test it for myself [dogfooding] @done(22-08-07 15:51)
	☐ DM to five people I know who will love this extension [dogfooding]
		✔ Hung Viet Nguyen @done(22-08-08 21:11)
		☐ Phuc Minh Tran
		☐ Quan Pham 
		☐ Saleshood design system v2 channel
		☐ Lò rèn chuỗi khối 
		☐ Group Minh Kien 
	☐ Hook material
		☐ Logo
		☐ Copywrite
	☐ Build backlink
		☐ Github profile
		☐ README
		☐ Product hunt
	☐ Content to promote the extension, including thank authors of `react-json-parser`


GOAL: with this vscode extension, I want to:
	- Have user (over 100 users and 20 5 star in the first month)
	- Experience a full flow of making a product at a more detail level compared to my last with DoughWatch
	- State who I am in Twitter space (at least 50 followers from backlink in Github, Product Hunt and VsCode marketplace)


